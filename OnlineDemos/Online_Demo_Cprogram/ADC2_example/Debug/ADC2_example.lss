
ADC2_example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000026a  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800118  00800118  00000316  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cac  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa1  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000416  00000000  00000000  00001b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000550  00000000  00000000  00001fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000116  00000000  00000000  00002504  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000261a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e6       	ldi	r30, 0x6A	; 106
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a8 31       	cpi	r26, 0x18	; 24
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a8 e1       	ldi	r26, 0x18	; 24
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a0 32       	cpi	r26, 0x20	; 32
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  ea:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <adc_init>:
	
	return 0;
}

void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	87 60       	ori	r24, 0x07	; 7
  fa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
  fc:	ac e7       	ldi	r26, 0x7C	; 124
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	8c 91       	ld	r24, X
 102:	80 64       	ori	r24, 0x40	; 64
 104:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);                //Turn on ADC
 106:	80 81       	ld	r24, Z
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
 112:	08 95       	ret

00000114 <read_adc>:
}

uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0;                    //Clear the older channel that was read
 114:	ec e7       	ldi	r30, 0x7C	; 124
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	90 81       	ld	r25, Z
 11a:	90 7f       	andi	r25, 0xF0	; 240
 11c:	90 83       	st	Z, r25
	ADMUX |= channel;                //Defines the new ADC channel to be read
 11e:	90 81       	ld	r25, Z
 120:	89 2b       	or	r24, r25
 122:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
 12e:	80 81       	ld	r24, Z
 130:	86 fd       	sbrc	r24, 6
 132:	fd cf       	rjmp	.-6      	; 0x12e <read_adc+0x1a>
	return ADCW;                    //Returns the ADC value of the chosen channel
 134:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 138:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 13c:	08 95       	ret

0000013e <USART_init>:

void USART_init(void){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 13e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 142:	87 e6       	ldi	r24, 0x67	; 103
 144:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 148:	88 e1       	ldi	r24, 0x18	; 24
 14a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 154:	08 95       	ret

00000156 <USART_send>:
}

void USART_send( unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)));
 156:	e0 ec       	ldi	r30, 0xC0	; 192
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	90 81       	ld	r25, Z
 15c:	95 ff       	sbrs	r25, 5
 15e:	fd cf       	rjmp	.-6      	; 0x15a <USART_send+0x4>
	UDR0 = data;
 160:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 164:	08 95       	ret

00000166 <USART_putstring>:
	
}

void USART_putstring(char* StringPtr){
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
 16c:	88 81       	ld	r24, Y
 16e:	88 23       	and	r24, r24
 170:	31 f0       	breq	.+12     	; 0x17e <USART_putstring+0x18>
 172:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 174:	0e 94 ab 00 	call	0x156	; 0x156 <USART_send>
	
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){
 178:	89 91       	ld	r24, Y+
 17a:	81 11       	cpse	r24, r1
 17c:	fb cf       	rjmp	.-10     	; 0x174 <USART_putstring+0xe>
		USART_send(*StringPtr);
	StringPtr++;}
	
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <main>:
void USART_init(void);            //Function to initialize and configure the USART/serial
void USART_send( unsigned char data);    //Function that sends a char over the serial port
void USART_putstring(char* StringPtr);    //Function that sends a string over the serial port

int main(void){
	adc_init();        //Setup the ADC
 184:	0e 94 79 00 	call	0xf2	; 0xf2 <adc_init>
	USART_init();        //Setup the USART
 188:	0e 94 9f 00 	call	0x13e	; 0x13e <USART_init>
	
	for(;;){        //Our infinite loop
		for(i=0; i<6; i++){
 18c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
			USART_putstring("Reading channel ");
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 b3 00 	call	0x166	; 0x166 <USART_putstring>
			USART_send('0');            //This is a nifty trick when we only want to send a number between 0 and 9
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	0e 94 ab 00 	call	0x156	; 0x156 <USART_send>
			USART_putstring(" : ");            //Just to keep things pretty
 19e:	81 e1       	ldi	r24, 0x11	; 17
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 b3 00 	call	0x166	; 0x166 <USART_putstring>
			adc_value = read_adc(0);        //Read one ADC channel
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 8a 00 	call	0x114	; 0x114 <read_adc>
 1ac:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <adc_value+0x1>
 1b0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <adc_value>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1b4:	4a e0       	ldi	r20, 0x0A	; 10
 1b6:	6b e1       	ldi	r22, 0x1B	; 27
 1b8:	71 e0       	ldi	r23, 0x01	; 1
 1ba:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__itoa_ncheck>
			itoa(adc_value, buffer, 10);        //Convert the read value to an ascii string
			USART_putstring(buffer);        //Send the converted value to the terminal
 1be:	8b e1       	ldi	r24, 0x1B	; 27
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 b3 00 	call	0x166	; 0x166 <USART_putstring>
			USART_putstring("  ");            //Some more formatting
 1c6:	85 e1       	ldi	r24, 0x15	; 21
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 b3 00 	call	0x166	; 0x166 <USART_putstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	89 e6       	ldi	r24, 0x69	; 105
 1d2:	98 e1       	ldi	r25, 0x18	; 24
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x50>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x5a>
 1de:	00 00       	nop
int main(void){
	adc_init();        //Setup the ADC
	USART_init();        //Setup the USART
	
	for(;;){        //Our infinite loop
		for(i=0; i<6; i++){
 1e0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 1ea:	86 30       	cpi	r24, 0x06	; 6
 1ec:	88 f2       	brcs	.-94     	; 0x190 <main+0xc>
			itoa(adc_value, buffer, 10);        //Convert the read value to an ascii string
			USART_putstring(buffer);        //Send the converted value to the terminal
			USART_putstring("  ");            //Some more formatting
			_delay_ms(500);                //You can tweak this value to have slower or faster readings or for max speed remove this line
		}
		USART_send('\r');
 1ee:	8d e0       	ldi	r24, 0x0D	; 13
 1f0:	0e 94 ab 00 	call	0x156	; 0x156 <USART_send>
		USART_send('\n');                //This two lines are to tell to the terminal to change line
 1f4:	8a e0       	ldi	r24, 0x0A	; 10
 1f6:	0e 94 ab 00 	call	0x156	; 0x156 <USART_send>
	}
 1fa:	c8 cf       	rjmp	.-112    	; 0x18c <main+0x8>

000001fc <__itoa_ncheck>:
 1fc:	bb 27       	eor	r27, r27
 1fe:	4a 30       	cpi	r20, 0x0A	; 10
 200:	31 f4       	brne	.+12     	; 0x20e <__itoa_ncheck+0x12>
 202:	99 23       	and	r25, r25
 204:	22 f4       	brpl	.+8      	; 0x20e <__itoa_ncheck+0x12>
 206:	bd e2       	ldi	r27, 0x2D	; 45
 208:	90 95       	com	r25
 20a:	81 95       	neg	r24
 20c:	9f 4f       	sbci	r25, 0xFF	; 255
 20e:	0c 94 0a 01 	jmp	0x214	; 0x214 <__utoa_common>

00000212 <__utoa_ncheck>:
 212:	bb 27       	eor	r27, r27

00000214 <__utoa_common>:
 214:	fb 01       	movw	r30, r22
 216:	55 27       	eor	r21, r21
 218:	aa 27       	eor	r26, r26
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	aa 1f       	adc	r26, r26
 220:	a4 17       	cp	r26, r20
 222:	10 f0       	brcs	.+4      	; 0x228 <__utoa_common+0x14>
 224:	a4 1b       	sub	r26, r20
 226:	83 95       	inc	r24
 228:	50 51       	subi	r21, 0x10	; 16
 22a:	b9 f7       	brne	.-18     	; 0x21a <__utoa_common+0x6>
 22c:	a0 5d       	subi	r26, 0xD0	; 208
 22e:	aa 33       	cpi	r26, 0x3A	; 58
 230:	08 f0       	brcs	.+2      	; 0x234 <__utoa_common+0x20>
 232:	a9 5d       	subi	r26, 0xD9	; 217
 234:	a1 93       	st	Z+, r26
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	79 f7       	brne	.-34     	; 0x218 <__utoa_common+0x4>
 23a:	b1 11       	cpse	r27, r1
 23c:	b1 93       	st	Z+, r27
 23e:	11 92       	st	Z+, r1
 240:	cb 01       	movw	r24, r22
 242:	0c 94 23 01 	jmp	0x246	; 0x246 <strrev>

00000246 <strrev>:
 246:	dc 01       	movw	r26, r24
 248:	fc 01       	movw	r30, r24
 24a:	67 2f       	mov	r22, r23
 24c:	71 91       	ld	r23, Z+
 24e:	77 23       	and	r23, r23
 250:	e1 f7       	brne	.-8      	; 0x24a <strrev+0x4>
 252:	32 97       	sbiw	r30, 0x02	; 2
 254:	04 c0       	rjmp	.+8      	; 0x25e <strrev+0x18>
 256:	7c 91       	ld	r23, X
 258:	6d 93       	st	X+, r22
 25a:	70 83       	st	Z, r23
 25c:	62 91       	ld	r22, -Z
 25e:	ae 17       	cp	r26, r30
 260:	bf 07       	cpc	r27, r31
 262:	c8 f3       	brcs	.-14     	; 0x256 <strrev+0x10>
 264:	08 95       	ret

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
